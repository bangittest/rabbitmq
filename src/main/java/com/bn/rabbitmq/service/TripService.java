package com.bn.rabbitmq.service;

import com.bn.rabbitmq.common.CommonConverter;
import com.bn.rabbitmq.domain.Station;
import com.bn.rabbitmq.domain.Train;
import com.bn.rabbitmq.domain.Trip;
import com.bn.rabbitmq.domain.TripDetail;
import com.bn.rabbitmq.dto.TrainLocationMessage;
import com.bn.rabbitmq.repository.StationRepository;
import com.bn.rabbitmq.repository.TrainRepository;
import com.bn.rabbitmq.repository.TripDetailRepository;
import com.bn.rabbitmq.repository.TripRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Service
@Slf4j
public class TripService {
    private final StationRepository stationRepository;

    private final RabbitTemplate rabbitTemplate;
    private final Random random = new Random();
    private final TripRepository tripRepository;
    private final TrainRepository trainRepository;
    private final TripDetailRepository tripDetailRepository;
    private double remainingDistance = 49.55;
    int a =1;

    private static final String CACHE_KEY = "station";

    private final RedisTemplate<String, Object> redisTemplate;

    public TripService(StationRepository stationRepository, RedisTemplate<String, Object> redisTemplate, RabbitTemplate rabbitTemplate, TripRepository tripRepository, TrainRepository trainRepository, TripDetailRepository tripDetailRepository) {
        this.stationRepository = stationRepository;
        this.redisTemplate = redisTemplate;
        this.rabbitTemplate = rabbitTemplate;
        this.tripRepository = tripRepository;
        this.trainRepository = trainRepository;
        this.tripDetailRepository = tripDetailRepository;
    }



    public void updateStatus(){
        List<Station> stations = stationRepository.findAll();
        redisTemplate.opsForValue().set(CACHE_KEY, stations, 10, TimeUnit.MINUTES);
    }

    public List<Station> getProductList() {
        return (List<Station>) redisTemplate.opsForValue().get(CACHE_KEY);
    }

//    private final RabbitTemplate rabbitTemplate;


    private static double lastDistance = 100.00; // Kho·∫£ng c√°ch ban ƒë·∫ßu


    public  double getRandomDistance() {
        if (lastDistance > 0) {
            double decrement = 0.1 + (2.0 * random.nextDouble()); // Gi·∫£m t·ª´ 0.1km ƒë·∫øn 2.0km m·ªói l·∫ßn
            lastDistance = Math.max(0, lastDistance - decrement); // ƒê·∫£m b·∫£o kh√¥ng xu·ªëng d∆∞·ªõi 0
        }
        return lastDistance;
    }
    @Scheduled(fixedRate = 500)
    public void runTaskWithCron() {
//        TrainLocationMessage message = new TrainLocationMessage("CODE-123", 1, 2, 60.0, 49.55, 183, 2);
        remainingDistance = Math.max(0, remainingDistance - random.nextDouble() * 2); // ƒê·∫£m b·∫£o kh√¥ng b·ªã √¢m

        TrainLocationMessage updateJob = new TrainLocationMessage(
                "CODE-123-%d",
                1,
                2,
                60.0,
                getRandomDistance(),
                random.nextInt(200),
                random.nextInt(50)
        );


        String a = CommonConverter.convertToJson(updateJob);
        rabbitTemplate.convertAndSend("directExchange", "companyRatingRoutingKey", a);
        System.out.println("üöÜ Sent: " + updateJob);
    }

    @Scheduled(fixedRate = 300000) // C·∫≠p nh·∫≠t m·ªói 5 ph√∫t
    public void refreshMapCache() {
        getProductList();
        System.out.println("refreshMapCache");
    }

    //Consumer nh·∫≠n t·ªça ƒë·ªô t·ª´ RabbitMQ
//    @RabbitListener(queues = "train-location-queue")
    public void receiveTrainLocation(TrainLocationMessage message) {
        try {
            Station nearestStation = findNearestStation(message.getX(), message.getY());

            if (nearestStation != null) {
                if (isFinalStation(nearestStation, message.getStationIdEnd())) {
                    completeTrainJourney(message);
                } else {
                    handleTrainStop(message, nearestStation);
                }
            }
        } catch (Exception e) {
//            log.error("L·ªói khi x·ª≠ l√Ω t·ªça ƒë·ªô t√†u: " + e.getMessage());
        }
    }

    // 5. Khi ƒë·∫øn ga cu·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i "HO√ÄN TH√ÄNH"
    private boolean isFinalStation(Station station, int stationIdEnd) {
        return station.getId() == stationIdEnd;
    }


// 3. T√¨m ga g·∫ßn nh·∫•t d·ª±a tr√™n t·ªça ƒë·ªô
//üìå H√†m t√¨m ga g·∫ßn nh·∫•t d·ª±a tr√™n kho·∫£ng c√°ch Euclidean
private Station findNearestStation(Integer trainX, Integer trainY) {
    List<Station> stations = (List<Station>) redisTemplate.opsForValue().get(CACHE_KEY);

    return stations.stream()
            .min(Comparator.comparingDouble(station ->
                    Math.pow(station.getX() - trainX, 2) + Math.pow(station.getY() - trainY, 2)))
            .filter(station -> Math.sqrt(
                    Math.pow(station.getX() - trainX, 2) + Math.pow(station.getY() - trainY, 2)) <= 5)
            .orElse(null);
}


    //‚úÖ 4. Khi t√†u ƒë·∫øn g·∫ßn ga, d·ª´ng 5 ph√∫t r·ªìi ch·∫°y ti·∫øp
    //üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i "D·ª™NG" v√† ch·ªù 5 ph√∫t ƒë·ªïi sang "CH·∫†Y"
//    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
//    private static final int MIN_STOP_TIME_SECONDS = 5;  // T·ªëi thi·ªÉu d·ª´ng 5 gi√¢y
//    private static final int MAX_DELAY_THRESHOLD_SECONDS = 30; // Ng∆∞·ª°ng b·ªè qua d·ª´ng
//
//    private void handleTrainStop(TrainLocationMessage message, Station station) {
//        String trainCode = message.getTrainCode();
//
//        long expectedArrivalTime = station.getExpectedArrivalTime(); // Gi·ªù d·ª± ki·∫øn
//        long actualArrivalTime = System.currentTimeMillis(); // Gi·ªù th·ª±c t·∫ø
//        long delaySeconds = (actualArrivalTime - expectedArrivalTime) / 1000; // ƒê·ªô l·ªách t√≠nh b·∫±ng gi√¢y
//
//        // L·∫•y th·ªùi gian d·ª´ng m·∫∑c ƒë·ªãnh t·ª´ config
//        int adjustedStopDuration = station.getConfig().getStopDuration();
//
//        if (delaySeconds > 0) { // N·∫øu ƒë·∫øn mu·ªôn
//            adjustedStopDuration = Math.max(MIN_STOP_TIME_SECONDS, adjustedStopDuration - (int) delaySeconds);
//            log.info("üöÜ T√†u {} ƒë·∫øn mu·ªôn {}s, gi·∫£m th·ªùi gian d·ª´ng c√≤n {}s", trainCode, delaySeconds, adjustedStopDuration);
//        } else if (delaySeconds < 0) { // N·∫øu ƒë·∫øn s·ªõm
//            adjustedStopDuration += Math.abs((int) delaySeconds);
//            log.info("üöÜ T√†u {} ƒë·∫øn s·ªõm {}s, tƒÉng th·ªùi gian d·ª´ng l√™n {}s", trainCode, Math.abs(delaySeconds), adjustedStopDuration);
//        }
//
//        // N·∫øu tr·ªÖ qu√° 30s, b·ªè qua d·ª´ng
//        if (delaySeconds > MAX_DELAY_THRESHOLD_SECONDS) {
//            adjustedStopDuration = 0;
//            log.info("üöÜ T√†u {} tr·ªÖ {}s, b·ªè qua d·ª´ng t·∫°i ga {}", trainCode, delaySeconds, station.getName());
//        }
//
//        if (adjustedStopDuration > 0) {
//            trainService.updateStatus(trainCode, "D·ª™NG");
//            log.info("üöÜ T√†u {} d·ª´ng t·∫°i ga {} trong {}s", trainCode, station.getName(), adjustedStopDuration);
//
//            scheduler.schedule(() -> {
//                trainService.updateStatus(trainCode, "CH·∫†Y");
//                log.info("üöÜ T√†u {} ti·∫øp t·ª•c h√†nh tr√¨nh t·ª´ ga {}", trainCode, station.getName());
//            }, adjustedStopDuration, TimeUnit.SECONDS);
//        } else {
//            trainService.updateStatus(trainCode, "CH·∫†Y");
//            log.info("üöÜ T√†u {} kh√¥ng d·ª´ng t·∫°i ga {}, ti·∫øp t·ª•c h√†nh tr√¨nh", trainCode, station.getName());
//        }
//    }

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10); // Cho ph√©p 10 t√†u ch·∫°y song song

    public void handleTrainStop(TrainLocationMessage message, Station station) {
        String trainCode = message.getTrainCode();
        int delaySeconds = calculateDelay(message, station);

        // L·∫•y th·ªùi gian d·ª´ng m·∫∑c ƒë·ªãnh c·ªßa ga
        int baseStopDuration = station.getConfig().getStopDuration();

        // N·∫øu t√†u ƒë·∫øn mu·ªôn, gi·∫£m th·ªùi gian d·ª´ng nh∆∞ng kh√¥ng nh·ªè h∆°n 5 gi√¢y
        int adjustedStopDuration = Math.max(5, baseStopDuration - delaySeconds);

        // N·∫øu tr·ªÖ qu√° 30 gi√¢y, b·ªè qua d·ª´ng
        if (delaySeconds > 30) {
            log.info("üöÜ T√†u {} ƒë·∫øn mu·ªôn {} gi√¢y, b·ªè qua d·ª´ng, ti·∫øp t·ª•c ch·∫°y ngay.", trainCode, delaySeconds);
            trainService.updateStatus(trainCode, "CH·∫†Y");
            return;
        }

        log.info("üöÜ T√†u {} ƒë·∫øn ga {}, d·ª´ng trong {} gi√¢y", trainCode, station.getName(), adjustedStopDuration);
        trainService.updateStatus(trainCode, "D·ª™NG");

        scheduler.schedule(() -> {
            trainService.updateStatus(trainCode, "CH·∫†Y");
            log.info("üöÜ T√†u {} ti·∫øp t·ª•c h√†nh tr√¨nh t·ª´ ga {}", trainCode, station.getName());
        }, adjustedStopDuration, TimeUnit.SECONDS);
    }

    // H√†m t√≠nh to√°n ƒë·ªô tr·ªÖ d·ª±a tr√™n th·ªùi gian d·ª± ki·∫øn v√† th·ª±c t·∫ø
    private int calculateDelay(TrainLocationMessage message, Station station) {
        Train train = trainRepository.getAllByCode(message.getTrainCode());
        Trip trip = tripRepository.getAllByTrainId(train.getId());
        TripDetail tripDetail = tripDetailRepository.findByTripIdAndStationId(trip.getId(),station.getId());
        long expectedArrivalTime = tripDetail.getArrivalTimeSchedule().getTime();
        long actualArrivalTime = System.currentTimeMillis();
        return (int) ((actualArrivalTime - expectedArrivalTime) / 1000); // Chuy·ªÉn sang gi√¢y
    }



    //Khi ƒë·∫øn ga cu·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i "HO√ÄN TH√ÄNH"
    private void completeTrainJourney(TrainLocationMessage message) {
//        log.info("üöÜ T√†u {} ƒë·∫øn ga cu·ªëi {}, ƒë·ªïi tr·∫°ng th√°i HO√ÄN TH√ÄNH", message.getTrainCode(), message.getStationIdEnd());

//        Trip train = trainService.getTrainByCode(message.getTrainCode());
//        if (train != null) {
//            train.setStatus("HO√ÄN TH√ÄNH");
//
//            long startTime = train.getStartTime(); // L·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu t·ª´ DB
//            long endTime = System.currentTimeMillis();
//            long actualDuration = endTime - startTime;
//
//            train.setEndTime(endTime);
//            train.setActualDuration(actualDuration);
//
//            // N·∫øu ƒë·∫øn s·ªõm, t√≠nh th·ªùi gian r·∫£nh
//            if (train.getExpectedDuration() > actualDuration) {
//                long freeTime = train.getExpectedDuration() - actualDuration;
//                train.setFreeTime(freeTime);
////                log.info("‚è∞ T√†u {} c√≥ {} ph√∫t th·ªùi gian r·∫£nh.", message.getTrainCode(), freeTime / 60000);
//            }
//
//            trainService.updateTrain(train);
        }
    }
    //‚úÖ Khi ƒë·∫øn ga cu·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i "HO√ÄN TH√ÄNH"
    //‚úÖ T√≠nh to√°n th·ªùi gian th·ª±c t·∫ø v√† th·ªùi gian r·∫£nh



