package com.bn.rabbitmq.excute;

import com.bn.rabbitmq.domain.Station;
import com.bn.rabbitmq.domain.Train;
import com.bn.rabbitmq.dto.TrainLocationMessage;
import com.bn.rabbitmq.repository.TrainRepository;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.atomic.AtomicReference;

@Service
public class TrainProcessingService {
    private final TrainRepository trainRepository;

    public TrainProcessingService(TrainRepository trainRepository) {
        this.trainRepository = trainRepository;
    }


    private final AtomicReference<Instant> lastUpdateTime = new AtomicReference<>(null);
    private final AtomicReference<Double> lastDistance = new AtomicReference<>(null);
    //Consumer nh·∫≠n t·ªça ƒë·ªô t·ª´ RabbitMQ
//    @RabbitListener(queues = "train-location-queue")
    public void processTrain(TrainLocationMessage message) {
        try {

            Instant currentTime = Instant.now();
            Double currentDistance = message.getDistance();
            System.out.printf("üîç Debug: lastDistance=%.2f, currentDistance=%.2f%n",
                    lastDistance.get(), currentDistance);


            // L·∫ßn ƒë·∫ßu ti√™n nh·∫≠n d·ªØ li·ªáu, kh·ªüi t·∫°o th·ªùi gian
            if (lastUpdateTime.get() == null || lastDistance.get() == null) {
                lastUpdateTime.set(currentTime);
                lastDistance.set(currentDistance);
                System.out.println("üöÜ B·∫Øt ƒë·∫ßu theo d√µi t√†u: " + message.getTrainCode());
                return;
            }

            // T√≠nh th·ªùi gian gi·ªØa 2 l·∫ßn c·∫≠p nh·∫≠t (gi√¢y)
            double deltaTime = (currentTime.toEpochMilli() - lastUpdateTime.get().toEpochMilli()) / 1000.0;
            if (deltaTime == 0) {
                System.out.println("‚ö†Ô∏è Th·ªùi gian c·∫≠p nh·∫≠t qu√° nhanh, b·ªè qua t√≠nh to√°n.");
                return;
            }

            // T√≠nh qu√£ng ƒë∆∞·ªùng ƒë√£ ƒëi
            double distanceTraveled = lastDistance.get() - currentDistance;
            if (distanceTraveled < 0) {
                System.out.printf("‚ö†Ô∏è L·ªói: Kho·∫£ng c√°ch c·∫≠p nh·∫≠t b·ªã ng∆∞·ª£c! (last=%.2f, current=%.2f)\n", lastDistance.get(), currentDistance);
                return;
            }

            // T√≠nh t·ªëc ƒë·ªô th·ª±c t·∫ø (km/h)
            double actualSpeed = (distanceTraveled / deltaTime) * 3600;

            // C·∫≠p nh·∫≠t l·∫°i th·ªùi gian v√† kho·∫£ng c√°ch
            lastUpdateTime.set(currentTime);
            lastDistance.set(currentDistance);

            // Debug log
            System.out.printf("[%s] üì° C·∫≠p nh·∫≠t t√†u: %s - Delta Time: %.2f s - Qu√£ng ƒë∆∞·ªùng ƒëi: %.2f km - T·ªëc ƒë·ªô th·ª±c t·∫ø: %.2f km/h - Qu√£ng ƒë∆∞·ªùng c√≤n l·∫°i: %.2f km%n",
                    currentTime, message.getTrainCode(), deltaTime, distanceTraveled, actualSpeed, currentDistance);


//            System.out.println(message.getTrainCode());
//            System.out.println(message.getStationIdStart());
//            System.out.println(message.getStationIdEnd());
//            System.out.println(message.getAverageSpeed());
//            System.out.println(message.getDistance());
//            System.out.println(message.getX());
//            System.out.println(message.getY());
            Station nearestStation = findNearestStation(message.getX(), message.getY());

            if (nearestStation != null) {
                if (isFinalStation(nearestStation, message.getStationIdEnd())) {
                    completeTrainJourney(message);
                } else {
                    handleTrainStop(message, nearestStation);
                }
            }
        } catch (Exception e) {
//            log.error("L·ªói khi x·ª≠ l√Ω t·ªça ƒë·ªô t√†u: " + e.getMessage());
        }
    }

    // 5. Khi ƒë·∫øn ga cu·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i "HO√ÄN TH√ÄNH"
    private boolean isFinalStation(Station station, int stationIdEnd) {
        return station.getId() == stationIdEnd;
    }


    // 3. T√¨m ga g·∫ßn nh·∫•t d·ª±a tr√™n t·ªça ƒë·ªô
//üìå H√†m t√¨m ga g·∫ßn nh·∫•t d·ª±a tr√™n kho·∫£ng c√°ch Euclidean
    private Station findNearestStation(Integer trainX, Integer trainY) {
//        List<Station> stations = (List<Station>) redisTemplate.opsForValue().get(CACHE_KEY);

        Station nearestStation = null;
        double minDistance = Double.MAX_VALUE;

//        for (Station station : stations) {
//            double distance = Math.sqrt(Math.pow(station.getX() - trainX, 2) + Math.pow(station.getY() - trainY, 2));
//            if (distance < minDistance) {
//                minDistance = distance;
//                nearestStation = station;
//            }
//        }
        return (minDistance <= 5) ? nearestStation : null; // N·∫øu kho·∫£ng c√°ch <= 5m th√¨ coi l√† g·∫ßn ga
    }

    //‚úÖ 4. Khi t√†u ƒë·∫øn g·∫ßn ga, d·ª´ng 5 ph√∫t r·ªìi ch·∫°y ti·∫øp
    //üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i "D·ª™NG" v√† ch·ªù 5 ph√∫t ƒë·ªïi sang "CH·∫†Y"
    private void handleTrainStop(TrainLocationMessage message, Station station) {
        String trainCode = message.getTrainCode();
//        log.info("üöÜ T√†u {} ƒë·∫øn g·∫ßn ga {}, ƒë·ªïi tr·∫°ng th√°i D·ª™NG", trainCode, station.getName());

//        trainService.updateStatus(trainCode, "D·ª™NG");

        // Sau 5 ph√∫t, ƒë·ªïi tr·∫°ng th√°i th√†nh "CH·∫†Y"
        new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
//                trainService.updateStatus(trainCode, "CH·∫†Y");
//                log.info("üöÜ T√†u {} ti·∫øp t·ª•c h√†nh tr√¨nh t·ª´ ga {}", trainCode, station.getName());
            }
        }, 5 * 60 * 1000); // 5 ph√∫t
    }

    //Khi ƒë·∫øn ga cu·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i "HO√ÄN TH√ÄNH"
    private void completeTrainJourney(TrainLocationMessage message) {
//        log.info("üöÜ T√†u {} ƒë·∫øn ga cu·ªëi {}, ƒë·ªïi tr·∫°ng th√°i HO√ÄN TH√ÄNH", message.getTrainCode(), message.getStationIdEnd());

//        Trip train = trainService.getTrainByCode(message.getTrainCode());
//        if (train != null) {
//            train.setStatus("HO√ÄN TH√ÄNH");
//
//            long startTime = train.getStartTime(); // L·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu t·ª´ DB
//            long endTime = System.currentTimeMillis();
//            long actualDuration = endTime - startTime;
//
//            train.setEndTime(endTime);
//            train.setActualDuration(actualDuration);
//
//            // N·∫øu ƒë·∫øn s·ªõm, t√≠nh th·ªùi gian r·∫£nh
//            if (train.getExpectedDuration() > actualDuration) {
//                long freeTime = train.getExpectedDuration() - actualDuration;
//                train.setFreeTime(freeTime);
////                log.info("‚è∞ T√†u {} c√≥ {} ph√∫t th·ªùi gian r·∫£nh.", message.getTrainCode(), freeTime / 60000);
//            }
//
//            trainService.updateTrain(train);
    }
}
